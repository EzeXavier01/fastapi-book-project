name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Update package index and install dependencies
            sudo apt-get update -y
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            sudo usermod -aG docker ${{ secrets.SSH_USER }}

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Verify installations
            docker --version
            docker-compose --version

            # Navigate to the project directory and deploy
            cd /home/ubuntu/
            git clone https://github.com/EzeXavier01/fastapi-book-project
            cd fastapi-book-project/
            git pull
            docker-compose up -d --build

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Match the version your app uses

      # Step 3: Install project dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Install Node.js for Vercel CLI
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Ensure a compatible version of Node.js

      # Step 5: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 6: Deploy to Vercel using the Vercel CLI
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel --token $VERCEL_TOKEN --prod --confirm